/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-02-14 18:40:25 UTC)
 * on 2014-03-18 at 04:54:44 UTC 
 * Modify at your own risk.
 */

package com.appspot.genuine_evening_455.flagengine;

/**
 * Service definition for Flagengine (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FlagengineRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Flagengine extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.16.0-rc of the flagengine library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://genuine-evening-455.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "flagengine/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Flagengine(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Flagengine(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Apps collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Flagengine flagengine = new Flagengine(...);}
   *   {@code Flagengine.Apps.List request = flagengine.apps().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Apps apps() {
    return new Apps();
  }

  /**
   * The "apps" collection of methods.
   */
  public class Apps {

    /**
     * An accessor for creating requests from the Notices collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Flagengine flagengine = new Flagengine(...);}
     *   {@code Flagengine.Notices.List request = flagengine.notices().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Notices notices() {
      return new Notices();
    }

    /**
     * The "notices" collection of methods.
     */
    public class Notices {

      /**
       * Create a request for the method "notices.get".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @return the request
       */
      public Get get() throws java.io.IOException {
        Get result = new Get();
        initialize(result);
        return result;
      }

      public class Get extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.Notice> {

        private static final String REST_PATH = "notice";

        /**
         * Create a request for the method "notices.get".
         *
         * This request holds the parameters needed by the the flagengine server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @since 1.13
         */
        protected Get() {
          super(Flagengine.this, "GET", REST_PATH, null, com.appspot.genuine_evening_455.flagengine.model.Notice.class);
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUserIp(java.lang.String userIp) {
          return (Get) super.setUserIp(userIp);
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "notices.insert".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Notice}
       * @return the request
       */
      public Insert insert(com.appspot.genuine_evening_455.flagengine.model.Notice content) throws java.io.IOException {
        Insert result = new Insert(content);
        initialize(result);
        return result;
      }

      public class Insert extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.Notice> {

        private static final String REST_PATH = "notice";

        /**
         * Create a request for the method "notices.insert".
         *
         * This request holds the parameters needed by the the flagengine server.  After setting any
         * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
         * <p> {@link
         * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Notice}
         * @since 1.13
         */
        protected Insert(com.appspot.genuine_evening_455.flagengine.model.Notice content) {
          super(Flagengine.this, "POST", REST_PATH, content, com.appspot.genuine_evening_455.flagengine.model.Notice.class);
        }

        @Override
        public Insert setAlt(java.lang.String alt) {
          return (Insert) super.setAlt(alt);
        }

        @Override
        public Insert setFields(java.lang.String fields) {
          return (Insert) super.setFields(fields);
        }

        @Override
        public Insert setKey(java.lang.String key) {
          return (Insert) super.setKey(key);
        }

        @Override
        public Insert setOauthToken(java.lang.String oauthToken) {
          return (Insert) super.setOauthToken(oauthToken);
        }

        @Override
        public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Insert) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Insert setQuotaUser(java.lang.String quotaUser) {
          return (Insert) super.setQuotaUser(quotaUser);
        }

        @Override
        public Insert setUserIp(java.lang.String userIp) {
          return (Insert) super.setUserIp(userIp);
        }

        @Override
        public Insert set(String parameterName, Object value) {
          return (Insert) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Versions collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Flagengine flagengine = new Flagengine(...);}
     *   {@code Flagengine.Versions.List request = flagengine.versions().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Versions versions() {
      return new Versions();
    }

    /**
     * The "versions" collection of methods.
     */
    public class Versions {

      /**
       * Create a request for the method "versions.get".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @return the request
       */
      public Get get() throws java.io.IOException {
        Get result = new Get();
        initialize(result);
        return result;
      }

      public class Get extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.Version> {

        private static final String REST_PATH = "version";

        /**
         * Create a request for the method "versions.get".
         *
         * This request holds the parameters needed by the the flagengine server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @since 1.13
         */
        protected Get() {
          super(Flagengine.this, "GET", REST_PATH, null, com.appspot.genuine_evening_455.flagengine.model.Version.class);
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUserIp(java.lang.String userIp) {
          return (Get) super.setUserIp(userIp);
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "versions.insert".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Version}
       * @return the request
       */
      public Insert insert(com.appspot.genuine_evening_455.flagengine.model.Version content) throws java.io.IOException {
        Insert result = new Insert(content);
        initialize(result);
        return result;
      }

      public class Insert extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.Version> {

        private static final String REST_PATH = "version";

        /**
         * Create a request for the method "versions.insert".
         *
         * This request holds the parameters needed by the the flagengine server.  After setting any
         * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
         * <p> {@link
         * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Version}
         * @since 1.13
         */
        protected Insert(com.appspot.genuine_evening_455.flagengine.model.Version content) {
          super(Flagengine.this, "POST", REST_PATH, content, com.appspot.genuine_evening_455.flagengine.model.Version.class);
        }

        @Override
        public Insert setAlt(java.lang.String alt) {
          return (Insert) super.setAlt(alt);
        }

        @Override
        public Insert setFields(java.lang.String fields) {
          return (Insert) super.setFields(fields);
        }

        @Override
        public Insert setKey(java.lang.String key) {
          return (Insert) super.setKey(key);
        }

        @Override
        public Insert setOauthToken(java.lang.String oauthToken) {
          return (Insert) super.setOauthToken(oauthToken);
        }

        @Override
        public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Insert) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Insert setQuotaUser(java.lang.String quotaUser) {
          return (Insert) super.setQuotaUser(quotaUser);
        }

        @Override
        public Insert setUserIp(java.lang.String userIp) {
          return (Insert) super.setUserIp(userIp);
        }

        @Override
        public Insert set(String parameterName, Object value) {
          return (Insert) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Beacons collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Flagengine flagengine = new Flagengine(...);}
   *   {@code Flagengine.Beacons.List request = flagengine.beacons().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Beacons beacons() {
    return new Beacons();
  }

  /**
   * The "beacons" collection of methods.
   */
  public class Beacons {

    /**
     * Create a request for the method "beacons.delete".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Beacon}
     * @return the request
     */
    public Delete delete(com.appspot.genuine_evening_455.flagengine.model.Beacon content) throws java.io.IOException {
      Delete result = new Delete(content);
      initialize(result);
      return result;
    }

    public class Delete extends FlagengineRequest<Void> {

      private static final String REST_PATH = "beacon";

      /**
       * Create a request for the method "beacons.delete".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Beacon}
       * @since 1.13
       */
      protected Delete(com.appspot.genuine_evening_455.flagengine.model.Beacon content) {
        super(Flagengine.this, "DELETE", REST_PATH, content, Void.class);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "beacons.get".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param beaconId
     * @return the request
     */
    public Get get(java.lang.String beaconId) throws java.io.IOException {
      Get result = new Get(beaconId);
      initialize(result);
      return result;
    }

    public class Get extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.Shop> {

      private static final String REST_PATH = "beacon";

      /**
       * Create a request for the method "beacons.get".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param beaconId
       * @since 1.13
       */
      protected Get(java.lang.String beaconId) {
        super(Flagengine.this, "GET", REST_PATH, null, com.appspot.genuine_evening_455.flagengine.model.Shop.class);
        this.beaconId = com.google.api.client.util.Preconditions.checkNotNull(beaconId, "Required parameter beaconId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String beaconId;

      /**

       */
      public java.lang.String getBeaconId() {
        return beaconId;
      }

      public Get setBeaconId(java.lang.String beaconId) {
        this.beaconId = beaconId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public Get setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "beacons.insert".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Beacon}
     * @return the request
     */
    public Insert insert(com.appspot.genuine_evening_455.flagengine.model.Beacon content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.Beacon> {

      private static final String REST_PATH = "beacon";

      /**
       * Create a request for the method "beacons.insert".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Beacon}
       * @since 1.13
       */
      protected Insert(com.appspot.genuine_evening_455.flagengine.model.Beacon content) {
        super(Flagengine.this, "POST", REST_PATH, content, com.appspot.genuine_evening_455.flagengine.model.Beacon.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Flags collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Flagengine flagengine = new Flagengine(...);}
   *   {@code Flagengine.Flags.List request = flagengine.flags().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Flags flags() {
    return new Flags();
  }

  /**
   * The "flags" collection of methods.
   */
  public class Flags {

    /**
     * Create a request for the method "flags.delete".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param flagId
     * @return the request
     */
    public Delete delete(java.lang.Long flagId) throws java.io.IOException {
      Delete result = new Delete(flagId);
      initialize(result);
      return result;
    }

    public class Delete extends FlagengineRequest<Void> {

      private static final String REST_PATH = "flag";

      /**
       * Create a request for the method "flags.delete".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param flagId
       * @since 1.13
       */
      protected Delete(java.lang.Long flagId) {
        super(Flagengine.this, "DELETE", REST_PATH, null, Void.class);
        this.flagId = com.google.api.client.util.Preconditions.checkNotNull(flagId, "Required parameter flagId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long flagId;

      /**

       */
      public java.lang.Long getFlagId() {
        return flagId;
      }

      public Delete setFlagId(java.lang.Long flagId) {
        this.flagId = flagId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "flags.insert".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Flag}
     * @return the request
     */
    public Insert insert(com.appspot.genuine_evening_455.flagengine.model.Flag content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.Flag> {

      private static final String REST_PATH = "flag";

      /**
       * Create a request for the method "flags.insert".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Flag}
       * @since 1.13
       */
      protected Insert(com.appspot.genuine_evening_455.flagengine.model.Flag content) {
        super(Flagengine.this, "POST", REST_PATH, content, com.appspot.genuine_evening_455.flagengine.model.Flag.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "flags.list".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.FlagCollection> {

      private static final String REST_PATH = "flag";

      /**
       * Create a request for the method "flags.list".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Flagengine.this, "GET", REST_PATH, null, com.appspot.genuine_evening_455.flagengine.model.FlagCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Double lat;

      /**

       */
      public java.lang.Double getLat() {
        return lat;
      }

      public List setLat(java.lang.Double lat) {
        this.lat = lat;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public List setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Double lon;

      /**

       */
      public java.lang.Double getLon() {
        return lon;
      }

      public List setLon(java.lang.Double lon) {
        this.lon = lon;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Images collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Flagengine flagengine = new Flagengine(...);}
   *   {@code Flagengine.Images.List request = flagengine.images().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Images images() {
    return new Images();
  }

  /**
   * The "images" collection of methods.
   */
  public class Images {

    /**
     * An accessor for creating requests from the UploadUrl collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Flagengine flagengine = new Flagengine(...);}
     *   {@code Flagengine.UploadUrl.List request = flagengine.uploadUrl().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public UploadUrl uploadUrl() {
      return new UploadUrl();
    }

    /**
     * The "uploadUrl" collection of methods.
     */
    public class UploadUrl {

      /**
       * Create a request for the method "uploadUrl.get".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @return the request
       */
      public Get get() throws java.io.IOException {
        Get result = new Get();
        initialize(result);
        return result;
      }

      public class Get extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.UploadUrl> {

        private static final String REST_PATH = "upload_url";

        /**
         * Create a request for the method "uploadUrl.get".
         *
         * This request holds the parameters needed by the the flagengine server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @since 1.13
         */
        protected Get() {
          super(Flagengine.this, "GET", REST_PATH, null, com.appspot.genuine_evening_455.flagengine.model.UploadUrl.class);
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUserIp(java.lang.String userIp) {
          return (Get) super.setUserIp(userIp);
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Items collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Flagengine flagengine = new Flagengine(...);}
   *   {@code Flagengine.Items.List request = flagengine.items().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Items items() {
    return new Items();
  }

  /**
   * The "items" collection of methods.
   */
  public class Items {

    /**
     * Create a request for the method "items.delete".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param itemId
     * @return the request
     */
    public Delete delete(java.lang.Long itemId) throws java.io.IOException {
      Delete result = new Delete(itemId);
      initialize(result);
      return result;
    }

    public class Delete extends FlagengineRequest<Void> {

      private static final String REST_PATH = "item";

      /**
       * Create a request for the method "items.delete".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param itemId
       * @since 1.13
       */
      protected Delete(java.lang.Long itemId) {
        super(Flagengine.this, "DELETE", REST_PATH, null, Void.class);
        this.itemId = com.google.api.client.util.Preconditions.checkNotNull(itemId, "Required parameter itemId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long itemId;

      /**

       */
      public java.lang.Long getItemId() {
        return itemId;
      }

      public Delete setItemId(java.lang.Long itemId) {
        this.itemId = itemId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "items.insert".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Item}
     * @return the request
     */
    public Insert insert(com.appspot.genuine_evening_455.flagengine.model.Item content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.Item> {

      private static final String REST_PATH = "item";

      /**
       * Create a request for the method "items.insert".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Item}
       * @since 1.13
       */
      protected Insert(com.appspot.genuine_evening_455.flagengine.model.Item content) {
        super(Flagengine.this, "POST", REST_PATH, content, com.appspot.genuine_evening_455.flagengine.model.Item.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "items.list".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.ItemCollection> {

      private static final String REST_PATH = "item";

      /**
       * Create a request for the method "items.list".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Flagengine.this, "GET", REST_PATH, null, com.appspot.genuine_evening_455.flagengine.model.ItemCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public List setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long shopId;

      /**

       */
      public java.lang.Long getShopId() {
        return shopId;
      }

      public List setShopId(java.lang.Long shopId) {
        this.shopId = shopId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "items.update".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Item}
     * @return the request
     */
    public Update update(com.appspot.genuine_evening_455.flagengine.model.Item content) throws java.io.IOException {
      Update result = new Update(content);
      initialize(result);
      return result;
    }

    public class Update extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.Item> {

      private static final String REST_PATH = "item";

      /**
       * Create a request for the method "items.update".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Item}
       * @since 1.13
       */
      protected Update(com.appspot.genuine_evening_455.flagengine.model.Item content) {
        super(Flagengine.this, "PUT", REST_PATH, content, com.appspot.genuine_evening_455.flagengine.model.Item.class);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Rewards collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Flagengine flagengine = new Flagengine(...);}
   *   {@code Flagengine.Rewards.List request = flagengine.rewards().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Rewards rewards() {
    return new Rewards();
  }

  /**
   * The "rewards" collection of methods.
   */
  public class Rewards {

    /**
     * Create a request for the method "rewards.insert".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Reward}
     * @return the request
     */
    public Insert insert(com.appspot.genuine_evening_455.flagengine.model.Reward content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.User> {

      private static final String REST_PATH = "reward";

      /**
       * Create a request for the method "rewards.insert".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Reward}
       * @since 1.13
       */
      protected Insert(com.appspot.genuine_evening_455.flagengine.model.Reward content) {
        super(Flagengine.this, "POST", REST_PATH, content, com.appspot.genuine_evening_455.flagengine.model.User.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "rewards.list".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.RewardCollection> {

      private static final String REST_PATH = "reward";

      /**
       * Create a request for the method "rewards.list".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Flagengine.this, "GET", REST_PATH, null, com.appspot.genuine_evening_455.flagengine.model.RewardCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public List setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Shops collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Flagengine flagengine = new Flagengine(...);}
   *   {@code Flagengine.Shops.List request = flagengine.shops().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Shops shops() {
    return new Shops();
  }

  /**
   * The "shops" collection of methods.
   */
  public class Shops {

    /**
     * Create a request for the method "shops.all".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link All#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public All all() throws java.io.IOException {
      All result = new All();
      initialize(result);
      return result;
    }

    public class All extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.ShopCollection> {

      private static final String REST_PATH = "shop_all";

      /**
       * Create a request for the method "shops.all".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link All#execute()} method to invoke the remote operation. <p>
       * {@link All#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected All() {
        super(Flagengine.this, "GET", REST_PATH, null, com.appspot.genuine_evening_455.flagengine.model.ShopCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public All setAlt(java.lang.String alt) {
        return (All) super.setAlt(alt);
      }

      @Override
      public All setFields(java.lang.String fields) {
        return (All) super.setFields(fields);
      }

      @Override
      public All setKey(java.lang.String key) {
        return (All) super.setKey(key);
      }

      @Override
      public All setOauthToken(java.lang.String oauthToken) {
        return (All) super.setOauthToken(oauthToken);
      }

      @Override
      public All setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (All) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public All setQuotaUser(java.lang.String quotaUser) {
        return (All) super.setQuotaUser(quotaUser);
      }

      @Override
      public All setUserIp(java.lang.String userIp) {
        return (All) super.setUserIp(userIp);
      }

      @Override
      public All set(String parameterName, Object value) {
        return (All) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "shops.delete".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param shopId
     * @return the request
     */
    public Delete delete(java.lang.Long shopId) throws java.io.IOException {
      Delete result = new Delete(shopId);
      initialize(result);
      return result;
    }

    public class Delete extends FlagengineRequest<Void> {

      private static final String REST_PATH = "shop";

      /**
       * Create a request for the method "shops.delete".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param shopId
       * @since 1.13
       */
      protected Delete(java.lang.Long shopId) {
        super(Flagengine.this, "DELETE", REST_PATH, null, Void.class);
        this.shopId = com.google.api.client.util.Preconditions.checkNotNull(shopId, "Required parameter shopId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long shopId;

      /**

       */
      public java.lang.Long getShopId() {
        return shopId;
      }

      public Delete setShopId(java.lang.Long shopId) {
        this.shopId = shopId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "shops.get".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Get get() throws java.io.IOException {
      Get result = new Get();
      initialize(result);
      return result;
    }

    public class Get extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.Shop> {

      private static final String REST_PATH = "shop";

      /**
       * Create a request for the method "shops.get".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Get() {
        super(Flagengine.this, "GET", REST_PATH, null, com.appspot.genuine_evening_455.flagengine.model.Shop.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public Get setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Get setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "shops.insert".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Shop}
     * @return the request
     */
    public Insert insert(com.appspot.genuine_evening_455.flagengine.model.Shop content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.Shop> {

      private static final String REST_PATH = "shop";

      /**
       * Create a request for the method "shops.insert".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Shop}
       * @since 1.13
       */
      protected Insert(com.appspot.genuine_evening_455.flagengine.model.Shop content) {
        super(Flagengine.this, "POST", REST_PATH, content, com.appspot.genuine_evening_455.flagengine.model.Shop.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "shops.list".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.ShopCollection> {

      private static final String REST_PATH = "shop_list";

      /**
       * Create a request for the method "shops.list".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Flagengine.this, "GET", REST_PATH, null, com.appspot.genuine_evening_455.flagengine.model.ShopCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.util.List<java.lang.Long> ids;

      /**

       */
      public java.util.List<java.lang.Long> getIds() {
        return ids;
      }

      public List setIds(java.util.List<java.lang.Long> ids) {
        this.ids = ids;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "shops.patch".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Shop}
     * @return the request
     */
    public Patch patch(com.appspot.genuine_evening_455.flagengine.model.Shop content) throws java.io.IOException {
      Patch result = new Patch(content);
      initialize(result);
      return result;
    }

    public class Patch extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.Shop> {

      private static final String REST_PATH = "shop";

      /**
       * Create a request for the method "shops.patch".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Shop}
       * @since 1.13
       */
      protected Patch(com.appspot.genuine_evening_455.flagengine.model.Shop content) {
        super(Flagengine.this, "PATCH", REST_PATH, content, com.appspot.genuine_evening_455.flagengine.model.Shop.class);
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "shops.update".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Shop}
     * @return the request
     */
    public Update update(com.appspot.genuine_evening_455.flagengine.model.Shop content) throws java.io.IOException {
      Update result = new Update(content);
      initialize(result);
      return result;
    }

    public class Update extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.Shop> {

      private static final String REST_PATH = "shop";

      /**
       * Create a request for the method "shops.update".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.Shop}
       * @since 1.13
       */
      protected Update(com.appspot.genuine_evening_455.flagengine.model.Shop content) {
        super(Flagengine.this, "PUT", REST_PATH, content, com.appspot.genuine_evening_455.flagengine.model.Shop.class);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Users collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Flagengine flagengine = new Flagengine(...);}
   *   {@code Flagengine.Users.List request = flagengine.users().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Users users() {
    return new Users();
  }

  /**
   * The "users" collection of methods.
   */
  public class Users {

    /**
     * Create a request for the method "users.get".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.UserForm}
     * @return the request
     */
    public Get get(com.appspot.genuine_evening_455.flagengine.model.UserForm content) throws java.io.IOException {
      Get result = new Get(content);
      initialize(result);
      return result;
    }

    public class Get extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.User> {

      private static final String REST_PATH = "old_user";

      /**
       * Create a request for the method "users.get".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.UserForm}
       * @since 1.13
       */
      protected Get(com.appspot.genuine_evening_455.flagengine.model.UserForm content) {
        super(Flagengine.this, "POST", REST_PATH, content, com.appspot.genuine_evening_455.flagengine.model.User.class);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "users.insert".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.UserForm}
     * @return the request
     */
    public Insert insert(com.appspot.genuine_evening_455.flagengine.model.UserForm content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.User> {

      private static final String REST_PATH = "new_user";

      /**
       * Create a request for the method "users.insert".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.UserForm}
       * @since 1.13
       */
      protected Insert(com.appspot.genuine_evening_455.flagengine.model.UserForm content) {
        super(Flagengine.this, "POST", REST_PATH, content, com.appspot.genuine_evening_455.flagengine.model.User.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "users.retain".
     *
     * This request holds the parameters needed by the the flagengine server.  After setting any
     * optional parameters, call the {@link Retain#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.RetainForm}
     * @return the request
     */
    public Retain retain(com.appspot.genuine_evening_455.flagengine.model.RetainForm content) throws java.io.IOException {
      Retain result = new Retain(content);
      initialize(result);
      return result;
    }

    public class Retain extends FlagengineRequest<com.appspot.genuine_evening_455.flagengine.model.User> {

      private static final String REST_PATH = "retain_user";

      /**
       * Create a request for the method "users.retain".
       *
       * This request holds the parameters needed by the the flagengine server.  After setting any
       * optional parameters, call the {@link Retain#execute()} method to invoke the remote operation.
       * <p> {@link
       * Retain#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.genuine_evening_455.flagengine.model.RetainForm}
       * @since 1.13
       */
      protected Retain(com.appspot.genuine_evening_455.flagengine.model.RetainForm content) {
        super(Flagengine.this, "POST", REST_PATH, content, com.appspot.genuine_evening_455.flagengine.model.User.class);
      }

      @Override
      public Retain setAlt(java.lang.String alt) {
        return (Retain) super.setAlt(alt);
      }

      @Override
      public Retain setFields(java.lang.String fields) {
        return (Retain) super.setFields(fields);
      }

      @Override
      public Retain setKey(java.lang.String key) {
        return (Retain) super.setKey(key);
      }

      @Override
      public Retain setOauthToken(java.lang.String oauthToken) {
        return (Retain) super.setOauthToken(oauthToken);
      }

      @Override
      public Retain setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Retain) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Retain setQuotaUser(java.lang.String quotaUser) {
        return (Retain) super.setQuotaUser(quotaUser);
      }

      @Override
      public Retain setUserIp(java.lang.String userIp) {
        return (Retain) super.setUserIp(userIp);
      }

      @Override
      public Retain set(String parameterName, Object value) {
        return (Retain) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Flagengine}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Flagengine}. */
    @Override
    public Flagengine build() {
      return new Flagengine(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FlagengineRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFlagengineRequestInitializer(
        FlagengineRequestInitializer flagengineRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(flagengineRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
